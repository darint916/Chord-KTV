// <auto-generated />
using System;
using System.Collections.Generic;
using ChordKTV.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ChordKTV.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250502031535_AddRefreshTokenToUser")]
    partial class AddRefreshTokenToUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AlbumSong", b =>
                {
                    b.Property<Guid>("AlbumsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SongsId")
                        .HasColumnType("uuid");

                    b.HasKey("AlbumsId", "SongsId");

                    b.HasIndex("SongsId");

                    b.ToTable("AlbumSong");
                });

            modelBuilder.Entity("ChordKTV.Models.Handwriting.LearnedWord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateLearned")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Language")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LearnedWords");
                });

            modelBuilder.Entity("ChordKTV.Models.Handwriting.UserHandwritingResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCompleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Language")
                        .HasColumnType("integer");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("WordTested")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserHandwritingResults");
                });

            modelBuilder.Entity("ChordKTV.Models.Playlist.UserPlaylistActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateFavorited")
                        .HasColumnType("timestamp with time zone");

                    b.PrimitiveCollection<List<DateTime>>("DatesPlayed")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone[]");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastPlayed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PlaylistId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlaylistThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserPlaylistActivities");
                });

            modelBuilder.Entity("ChordKTV.Models.Quiz.Quiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Difficulty")
                        .HasColumnType("integer");

                    b.Property<int>("NumQuestions")
                        .HasColumnType("integer");

                    b.Property<Guid>("SongId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("ChordKTV.Models.Quiz.QuizOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId", "OrderIndex")
                        .IsUnique();

                    b.ToTable("QuizOptions");
                });

            modelBuilder.Entity("ChordKTV.Models.Quiz.QuizQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeSpan?>("EndTimestamp")
                        .HasColumnType("interval");

                    b.Property<string>("LyricPhrase")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QuestionNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan?>("StartTimestamp")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("ChordKTV.Models.Quiz.UserQuizResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCompleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Language")
                        .HasColumnType("integer");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uuid");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("UserQuizzesDone");
                });

            modelBuilder.Entity("ChordKTV.Models.SongData.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsSingle")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("ChordKTV.Models.SongData.GeniusMetaData", b =>
                {
                    b.Property<int>("GeniusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GeniusId"));

                    b.Property<string>("HeaderImageThumbnailUrl")
                        .HasColumnType("text");

                    b.Property<string>("HeaderImageUrl")
                        .HasColumnType("text");

                    b.Property<int>("Language")
                        .HasColumnType("integer");

                    b.Property<string>("SongImageThumbnailUrl")
                        .HasColumnType("text");

                    b.Property<string>("SongImageUrl")
                        .HasColumnType("text");

                    b.HasKey("GeniusId");

                    b.ToTable("GeniusMetaData");
                });

            modelBuilder.Entity("ChordKTV.Models.SongData.Song", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<List<string>>("AlternateTitles")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.PrimitiveCollection<List<string>>("AlternateYoutubeIds")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("interval");

                    b.PrimitiveCollection<List<string>>("FeaturedArtists")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("GeniusMetaDataGeniusId")
                        .HasColumnType("integer");

                    b.Property<string>("Genre")
                        .HasColumnType("text");

                    b.Property<int?>("LrcId")
                        .HasColumnType("integer");

                    b.Property<string>("LrcLyrics")
                        .HasColumnType("text");

                    b.Property<string>("LrcRomanizedLyrics")
                        .HasColumnType("text");

                    b.Property<string>("LrcTranslatedLyrics")
                        .HasColumnType("text");

                    b.Property<string>("PlainLyrics")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<int?>("RomLrcId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("YoutubeId")
                        .HasColumnType("text");

                    b.Property<string>("YoutubeInstrumentalId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GeniusMetaDataGeniusId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("ChordKTV.Models.SongData.UserSongActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateFavorited")
                        .HasColumnType("timestamp with time zone");

                    b.PrimitiveCollection<List<DateTime>>("DatesPlayed")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone[]");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastPlayed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SongId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SongId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSongActivities");
                });

            modelBuilder.Entity("ChordKTV.Models.SongData.YoutubeSong", b =>
                {
                    b.Property<string>("YoutubeId")
                        .HasColumnType("text");

                    b.Property<Guid>("SongId")
                        .HasColumnType("uuid");

                    b.HasKey("YoutubeId");

                    b.HasIndex("SongId");

                    b.ToTable("YoutubeSongs");
                });

            modelBuilder.Entity("ChordKTV.Models.UserData.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AlbumSong", b =>
                {
                    b.HasOne("ChordKTV.Models.SongData.Album", null)
                        .WithMany()
                        .HasForeignKey("AlbumsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChordKTV.Models.SongData.Song", null)
                        .WithMany()
                        .HasForeignKey("SongsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChordKTV.Models.Handwriting.LearnedWord", b =>
                {
                    b.HasOne("ChordKTV.Models.UserData.User", null)
                        .WithMany("LearnedWords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChordKTV.Models.Handwriting.UserHandwritingResult", b =>
                {
                    b.HasOne("ChordKTV.Models.UserData.User", null)
                        .WithMany("HandwritingResults")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChordKTV.Models.Playlist.UserPlaylistActivity", b =>
                {
                    b.HasOne("ChordKTV.Models.UserData.User", null)
                        .WithMany("PlaylistActivities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChordKTV.Models.Quiz.QuizOption", b =>
                {
                    b.HasOne("ChordKTV.Models.Quiz.QuizQuestion", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ChordKTV.Models.Quiz.QuizQuestion", b =>
                {
                    b.HasOne("ChordKTV.Models.Quiz.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("ChordKTV.Models.Quiz.UserQuizResult", b =>
                {
                    b.HasOne("ChordKTV.Models.Quiz.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChordKTV.Models.UserData.User", null)
                        .WithMany("QuizResults")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("ChordKTV.Models.SongData.Song", b =>
                {
                    b.HasOne("ChordKTV.Models.SongData.GeniusMetaData", "GeniusMetaData")
                        .WithMany()
                        .HasForeignKey("GeniusMetaDataGeniusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeniusMetaData");
                });

            modelBuilder.Entity("ChordKTV.Models.SongData.UserSongActivity", b =>
                {
                    b.HasOne("ChordKTV.Models.SongData.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChordKTV.Models.UserData.User", null)
                        .WithMany("SongActivities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");
                });

            modelBuilder.Entity("ChordKTV.Models.SongData.YoutubeSong", b =>
                {
                    b.HasOne("ChordKTV.Models.SongData.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");
                });

            modelBuilder.Entity("ChordKTV.Models.Quiz.Quiz", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("ChordKTV.Models.Quiz.QuizQuestion", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("ChordKTV.Models.UserData.User", b =>
                {
                    b.Navigation("HandwritingResults");

                    b.Navigation("LearnedWords");

                    b.Navigation("PlaylistActivities");

                    b.Navigation("QuizResults");

                    b.Navigation("SongActivities");
                });
#pragma warning restore 612, 618
        }
    }
}
