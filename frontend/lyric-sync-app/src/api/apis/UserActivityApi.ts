/* tslint:disable */
/* eslint-disable */
/**
 * ChordKTV API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LanguageCode,
  LearnedWordDto,
  UserHandwritingResultDto,
  UserQuizResultDto,
} from '../models/index';
import {
    LanguageCodeFromJSON,
    LanguageCodeToJSON,
    LearnedWordDtoFromJSON,
    LearnedWordDtoToJSON,
    UserHandwritingResultDtoFromJSON,
    UserHandwritingResultDtoToJSON,
    UserQuizResultDtoFromJSON,
    UserQuizResultDtoToJSON,
} from '../models/index';

export interface ApiUserActivityFavoritePlaylistPatchRequest {
    requestBody?: { [key: string]: any; };
}

export interface ApiUserActivityFavoriteSongPatchRequest {
    requestBody?: { [key: string]: any; };
}

export interface ApiUserActivityHandwritingGetRequest {
    language?: LanguageCode;
}

export interface ApiUserActivityHandwritingPostRequest {
    userHandwritingResultDto?: UserHandwritingResultDto;
}

export interface ApiUserActivityLearnedWordPostRequest {
    learnedWordDto?: LearnedWordDto;
}

export interface ApiUserActivityLearnedWordsGetRequest {
    language?: LanguageCode;
}

export interface ApiUserActivityPlaylistPostRequest {
    requestBody?: { [key: string]: any; };
}

export interface ApiUserActivityQuizPostRequest {
    userQuizResultDto?: UserQuizResultDto;
}

export interface ApiUserActivityQuizzesGetRequest {
    language?: LanguageCode;
}

export interface ApiUserActivitySongPostRequest {
    requestBody?: { [key: string]: any; };
}

/**
 * 
 */
export class UserActivityApi extends runtime.BaseAPI {

    /**
     */
    async apiUserActivityFavoritePlaylistPatchRaw(requestParameters: ApiUserActivityFavoritePlaylistPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/user/activity/favorite/playlist`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUserActivityFavoritePlaylistPatch(requestParameters: ApiUserActivityFavoritePlaylistPatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUserActivityFavoritePlaylistPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Get user\'s favorite playlists
     */
    async apiUserActivityFavoritePlaylistsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<{ [key: string]: any; }>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/user/activity/favorite/playlists`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get user\'s favorite playlists
     */
    async apiUserActivityFavoritePlaylistsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<{ [key: string]: any; }>> {
        const response = await this.apiUserActivityFavoritePlaylistsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserActivityFavoriteSongPatchRaw(requestParameters: ApiUserActivityFavoriteSongPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/user/activity/favorite/song`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUserActivityFavoriteSongPatch(requestParameters: ApiUserActivityFavoriteSongPatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUserActivityFavoriteSongPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Get user\'s favorite songs
     */
    async apiUserActivityFavoriteSongsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<{ [key: string]: any; }>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/user/activity/favorite/songs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get user\'s favorite songs
     */
    async apiUserActivityFavoriteSongsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<{ [key: string]: any; }>> {
        const response = await this.apiUserActivityFavoriteSongsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserActivityFullGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/user/activity/full`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUserActivityFullGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUserActivityFullGetRaw(initOverrides);
    }

    /**
     * Get user\'s handwriting results
     */
    async apiUserActivityHandwritingGetRaw(requestParameters: ApiUserActivityHandwritingGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserHandwritingResultDto>>> {
        const queryParameters: any = {};

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/user/activity/handwriting`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserHandwritingResultDtoFromJSON));
    }

    /**
     * Get user\'s handwriting results
     */
    async apiUserActivityHandwritingGet(requestParameters: ApiUserActivityHandwritingGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserHandwritingResultDto>> {
        const response = await this.apiUserActivityHandwritingGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserActivityHandwritingPostRaw(requestParameters: ApiUserActivityHandwritingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/user/activity/handwriting`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserHandwritingResultDtoToJSON(requestParameters['userHandwritingResultDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUserActivityHandwritingPost(requestParameters: ApiUserActivityHandwritingPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUserActivityHandwritingPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiUserActivityLearnedWordPostRaw(requestParameters: ApiUserActivityLearnedWordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/user/activity/learned-word`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LearnedWordDtoToJSON(requestParameters['learnedWordDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUserActivityLearnedWordPost(requestParameters: ApiUserActivityLearnedWordPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUserActivityLearnedWordPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get user\'s learned words
     */
    async apiUserActivityLearnedWordsGetRaw(requestParameters: ApiUserActivityLearnedWordsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LearnedWordDto>>> {
        const queryParameters: any = {};

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/user/activity/learned-words`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LearnedWordDtoFromJSON));
    }

    /**
     * Get user\'s learned words
     */
    async apiUserActivityLearnedWordsGet(requestParameters: ApiUserActivityLearnedWordsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LearnedWordDto>> {
        const response = await this.apiUserActivityLearnedWordsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserActivityPlaylistPostRaw(requestParameters: ApiUserActivityPlaylistPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/user/activity/playlist`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUserActivityPlaylistPost(requestParameters: ApiUserActivityPlaylistPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUserActivityPlaylistPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get user\'s playlist activity
     */
    async apiUserActivityPlaylistsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<{ [key: string]: any; }>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/user/activity/playlists`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get user\'s playlist activity
     */
    async apiUserActivityPlaylistsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<{ [key: string]: any; }>> {
        const response = await this.apiUserActivityPlaylistsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserActivityQuizPostRaw(requestParameters: ApiUserActivityQuizPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/user/activity/quiz`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserQuizResultDtoToJSON(requestParameters['userQuizResultDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUserActivityQuizPost(requestParameters: ApiUserActivityQuizPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUserActivityQuizPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get user\'s quiz results
     */
    async apiUserActivityQuizzesGetRaw(requestParameters: ApiUserActivityQuizzesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserQuizResultDto>>> {
        const queryParameters: any = {};

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/user/activity/quizzes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserQuizResultDtoFromJSON));
    }

    /**
     * Get user\'s quiz results
     */
    async apiUserActivityQuizzesGet(requestParameters: ApiUserActivityQuizzesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserQuizResultDto>> {
        const response = await this.apiUserActivityQuizzesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserActivitySongPostRaw(requestParameters: ApiUserActivitySongPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/user/activity/song`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUserActivitySongPost(requestParameters: ApiUserActivitySongPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUserActivitySongPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get user\'s song activity
     */
    async apiUserActivitySongsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<{ [key: string]: any; }>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/user/activity/songs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get user\'s song activity
     */
    async apiUserActivitySongsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<{ [key: string]: any; }>> {
        const response = await this.apiUserActivitySongsGetRaw(initOverrides);
        return await response.value();
    }

}
