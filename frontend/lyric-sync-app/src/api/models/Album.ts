/* tslint:disable */
/* eslint-disable */
/**
 * ChordKTV API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Song } from './Song';
import {
    SongFromJSON,
    SongFromJSONTyped,
    SongToJSON,
    SongToJSONTyped,
} from './Song';

/**
 * 
 * @export
 * @interface Album
 */
export interface Album {
    /**
     * 
     * @type {string}
     * @memberof Album
     */
    id?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Album
     */
    isSingle?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Album
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Album
     */
    artist?: string | null;
    /**
     * 
     * @type {Array<Song>}
     * @memberof Album
     */
    songs?: Array<Song> | null;
}

/**
 * Check if a given object implements the Album interface.
 */
export function instanceOfAlbum(value: object): value is Album {
    return true;
}

export function AlbumFromJSON(json: any): Album {
    return AlbumFromJSONTyped(json, false);
}

export function AlbumFromJSONTyped(json: any, ignoreDiscriminator: boolean): Album {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'isSingle': json['isSingle'] == null ? undefined : json['isSingle'],
        'name': json['name'] == null ? undefined : json['name'],
        'artist': json['artist'] == null ? undefined : json['artist'],
        'songs': json['songs'] == null ? undefined : ((json['songs'] as Array<any>).map(SongFromJSON)),
    };
}

export function AlbumToJSON(json: any): Album {
    return AlbumToJSONTyped(json, false);
}

export function AlbumToJSONTyped(value?: Album | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'isSingle': value['isSingle'],
        'name': value['name'],
        'artist': value['artist'],
        'songs': value['songs'] == null ? undefined : ((value['songs'] as Array<any>).map(SongToJSON)),
    };
}

