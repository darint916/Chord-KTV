/* tslint:disable */
/* eslint-disable */
/**
 * ChordKTV
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GeniusMetaData } from './GeniusMetaData';
import {
    GeniusMetaDataFromJSON,
    GeniusMetaDataFromJSONTyped,
    GeniusMetaDataToJSON,
    GeniusMetaDataToJSONTyped,
} from './GeniusMetaData';
import type { Album } from './Album';
import {
    AlbumFromJSON,
    AlbumFromJSONTyped,
    AlbumToJSON,
    AlbumToJSONTyped,
} from './Album';

/**
 * 
 * @export
 * @interface Song
 */
export interface Song {
    /**
     * 
     * @type {string}
     * @memberof Song
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Song
     */
    title: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Song
     */
    alternateTitles?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof Song
     */
    artist?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof Song
     */
    featuredArtists?: Array<string> | null;
    /**
     * 
     * @type {Array<Album>}
     * @memberof Song
     */
    albums?: Array<Album> | null;
    /**
     * 
     * @type {Date}
     * @memberof Song
     */
    releaseDate?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof Song
     */
    genre?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Song
     */
    duration?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Song
     */
    plainLyrics?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Song
     */
    lrcLyrics?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Song
     */
    lrcRomanizedLyrics?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Song
     */
    lrcTranslatedLyrics?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Song
     */
    lrcId?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Song
     */
    romLrcId?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Song
     */
    youtubeUrl?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof Song
     */
    alternateYoutubeUrls?: Array<string> | null;
    /**
     * 
     * @type {GeniusMetaData}
     * @memberof Song
     */
    geniusMetaData?: GeniusMetaData;
}

/**
 * Check if a given object implements the Song interface.
 */
export function instanceOfSong(value: object): value is Song {
    if (!('title' in value) || value['title'] === undefined) return false;
    return true;
}

export function SongFromJSON(json: any): Song {
    return SongFromJSONTyped(json, false);
}

export function SongFromJSONTyped(json: any, ignoreDiscriminator: boolean): Song {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'title': json['title'],
        'alternateTitles': json['alternateTitles'] == null ? undefined : json['alternateTitles'],
        'artist': json['artist'] == null ? undefined : json['artist'],
        'featuredArtists': json['featuredArtists'] == null ? undefined : json['featuredArtists'],
        'albums': json['albums'] == null ? undefined : ((json['albums'] as Array<any>).map(AlbumFromJSON)),
        'releaseDate': json['releaseDate'] == null ? undefined : (new Date(json['releaseDate'])),
        'genre': json['genre'] == null ? undefined : json['genre'],
        'duration': json['duration'] == null ? undefined : json['duration'],
        'plainLyrics': json['plainLyrics'] == null ? undefined : json['plainLyrics'],
        'lrcLyrics': json['lrcLyrics'] == null ? undefined : json['lrcLyrics'],
        'lrcRomanizedLyrics': json['lrcRomanizedLyrics'] == null ? undefined : json['lrcRomanizedLyrics'],
        'lrcTranslatedLyrics': json['lrcTranslatedLyrics'] == null ? undefined : json['lrcTranslatedLyrics'],
        'lrcId': json['lrcId'] == null ? undefined : json['lrcId'],
        'romLrcId': json['romLrcId'] == null ? undefined : json['romLrcId'],
        'youtubeUrl': json['youtubeUrl'] == null ? undefined : json['youtubeUrl'],
        'alternateYoutubeUrls': json['alternateYoutubeUrls'] == null ? undefined : json['alternateYoutubeUrls'],
        'geniusMetaData': json['geniusMetaData'] == null ? undefined : GeniusMetaDataFromJSON(json['geniusMetaData']),
    };
}

export function SongToJSON(json: any): Song {
    return SongToJSONTyped(json, false);
}

export function SongToJSONTyped(value?: Song | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'title': value['title'],
        'alternateTitles': value['alternateTitles'],
        'artist': value['artist'],
        'featuredArtists': value['featuredArtists'],
        'albums': value['albums'] == null ? undefined : ((value['albums'] as Array<any>).map(AlbumToJSON)),
        'releaseDate': value['releaseDate'] == null ? undefined : ((value['releaseDate'] as any).toISOString().substring(0,10)),
        'genre': value['genre'],
        'duration': value['duration'],
        'plainLyrics': value['plainLyrics'],
        'lrcLyrics': value['lrcLyrics'],
        'lrcRomanizedLyrics': value['lrcRomanizedLyrics'],
        'lrcTranslatedLyrics': value['lrcTranslatedLyrics'],
        'lrcId': value['lrcId'],
        'romLrcId': value['romLrcId'],
        'youtubeUrl': value['youtubeUrl'],
        'alternateYoutubeUrls': value['alternateYoutubeUrls'],
        'geniusMetaData': GeniusMetaDataToJSON(value['geniusMetaData']),
    };
}

