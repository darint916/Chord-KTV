/* tslint:disable */
/* eslint-disable */
/**
 * ChordKTV API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UserSongActivityDto
 */
export interface UserSongActivityDto {
    /**
     * 
     * @type {string}
     * @memberof UserSongActivityDto
     */
    songId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserSongActivityDto
     */
    isFavorite?: boolean;
    /**
     * 
     * @type {Array<Date>}
     * @memberof UserSongActivityDto
     */
    datesPlayed?: Array<Date> | null;
    /**
     * 
     * @type {Date}
     * @memberof UserSongActivityDto
     */
    lastPlayed?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UserSongActivityDto
     */
    dateFavorited?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof UserSongActivityDto
     */
    title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserSongActivityDto
     */
    artist?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserSongActivityDto
     */
    geniusThumbnailUrl?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserSongActivityDto
     */
    youtubeThumbnailUrl?: string | null;
}

/**
 * Check if a given object implements the UserSongActivityDto interface.
 */
export function instanceOfUserSongActivityDto(value: object): value is UserSongActivityDto {
    return true;
}

export function UserSongActivityDtoFromJSON(json: any): UserSongActivityDto {
    return UserSongActivityDtoFromJSONTyped(json, false);
}

export function UserSongActivityDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserSongActivityDto {
    if (json == null) {
        return json;
    }
    return {
        
        'songId': json['songId'] == null ? undefined : json['songId'],
        'isFavorite': json['isFavorite'] == null ? undefined : json['isFavorite'],
        'datesPlayed': json['datesPlayed'] == null ? undefined : json['datesPlayed'],
        'lastPlayed': json['lastPlayed'] == null ? undefined : (new Date(json['lastPlayed'])),
        'dateFavorited': json['dateFavorited'] == null ? undefined : (new Date(json['dateFavorited'])),
        'title': json['title'] == null ? undefined : json['title'],
        'artist': json['artist'] == null ? undefined : json['artist'],
        'geniusThumbnailUrl': json['geniusThumbnailUrl'] == null ? undefined : json['geniusThumbnailUrl'],
        'youtubeThumbnailUrl': json['youtubeThumbnailUrl'] == null ? undefined : json['youtubeThumbnailUrl'],
    };
}

export function UserSongActivityDtoToJSON(json: any): UserSongActivityDto {
    return UserSongActivityDtoToJSONTyped(json, false);
}

export function UserSongActivityDtoToJSONTyped(value?: UserSongActivityDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'songId': value['songId'],
        'isFavorite': value['isFavorite'],
        'datesPlayed': value['datesPlayed'],
        'lastPlayed': value['lastPlayed'] == null ? undefined : ((value['lastPlayed']).toISOString()),
        'dateFavorited': value['dateFavorited'] == null ? undefined : ((value['dateFavorited'] as any).toISOString()),
        'title': value['title'],
        'artist': value['artist'],
        'geniusThumbnailUrl': value['geniusThumbnailUrl'],
        'youtubeThumbnailUrl': value['youtubeThumbnailUrl'],
    };
}

